/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.cc2250.ezlivingcolors1.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.cc2250.ezlivingcolors1.util.Ezlivingcolors1AdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class Ezlivingcolors1ItemProviderAdapterFactory extends Ezlivingcolors1AdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Ezlivingcolors1ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsSetRGBCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivingColorsSetRGBCmdItemProvider livingColorsSetRGBCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsSetRGBCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivingColorsSetRGBCmdAdapter() {
		if (livingColorsSetRGBCmdItemProvider == null) {
			livingColorsSetRGBCmdItemProvider = new LivingColorsSetRGBCmdItemProvider(this);
		}

		return livingColorsSetRGBCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsSetHSVCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivingColorsSetHSVCmdItemProvider livingColorsSetHSVCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsSetHSVCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivingColorsSetHSVCmdAdapter() {
		if (livingColorsSetHSVCmdItemProvider == null) {
			livingColorsSetHSVCmdItemProvider = new LivingColorsSetHSVCmdItemProvider(this);
		}

		return livingColorsSetHSVCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsInitCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivingColorsInitCmdItemProvider livingColorsInitCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsInitCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivingColorsInitCmdAdapter() {
		if (livingColorsInitCmdItemProvider == null) {
			livingColorsInitCmdItemProvider = new LivingColorsInitCmdItemProvider(this);
		}

		return livingColorsInitCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsGetMaxNumLampsCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivingColorsGetMaxNumLampsCmdItemProvider livingColorsGetMaxNumLampsCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsGetMaxNumLampsCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivingColorsGetMaxNumLampsCmdAdapter() {
		if (livingColorsGetMaxNumLampsCmdItemProvider == null) {
			livingColorsGetMaxNumLampsCmdItemProvider = new LivingColorsGetMaxNumLampsCmdItemProvider(this);
		}

		return livingColorsGetMaxNumLampsCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsAddLampCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivingColorsAddLampCmdItemProvider livingColorsAddLampCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsAddLampCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivingColorsAddLampCmdAdapter() {
		if (livingColorsAddLampCmdItemProvider == null) {
			livingColorsAddLampCmdItemProvider = new LivingColorsAddLampCmdItemProvider(this);
		}

		return livingColorsAddLampCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsGetLampCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivingColorsGetLampCmdItemProvider livingColorsGetLampCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsGetLampCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivingColorsGetLampCmdAdapter() {
		if (livingColorsGetLampCmdItemProvider == null) {
			livingColorsGetLampCmdItemProvider = new LivingColorsGetLampCmdItemProvider(this);
		}

		return livingColorsGetLampCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsLearnLampsCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivingColorsLearnLampsCmdItemProvider livingColorsLearnLampsCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsLearnLampsCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivingColorsLearnLampsCmdAdapter() {
		if (livingColorsLearnLampsCmdItemProvider == null) {
			livingColorsLearnLampsCmdItemProvider = new LivingColorsLearnLampsCmdItemProvider(this);
		}

		return livingColorsLearnLampsCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivinColorsClearLampsCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivinColorsClearLampsCmdItemProvider livinColorsClearLampsCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivinColorsClearLampsCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivinColorsClearLampsCmdAdapter() {
		if (livinColorsClearLampsCmdItemProvider == null) {
			livinColorsClearLampsCmdItemProvider = new LivinColorsClearLampsCmdItemProvider(this);
		}

		return livinColorsClearLampsCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsTurnLampOnRGBCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivingColorsTurnLampOnRGBCmdItemProvider livingColorsTurnLampOnRGBCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsTurnLampOnRGBCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivingColorsTurnLampOnRGBCmdAdapter() {
		if (livingColorsTurnLampOnRGBCmdItemProvider == null) {
			livingColorsTurnLampOnRGBCmdItemProvider = new LivingColorsTurnLampOnRGBCmdItemProvider(this);
		}

		return livingColorsTurnLampOnRGBCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsTurnLampOnHSVCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivingColorsTurnLampOnHSVCmdItemProvider livingColorsTurnLampOnHSVCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsTurnLampOnHSVCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivingColorsTurnLampOnHSVCmdAdapter() {
		if (livingColorsTurnLampOnHSVCmdItemProvider == null) {
			livingColorsTurnLampOnHSVCmdItemProvider = new LivingColorsTurnLampOnHSVCmdItemProvider(this);
		}

		return livingColorsTurnLampOnHSVCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsTurnOffLampCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivingColorsTurnOffLampCmdItemProvider livingColorsTurnOffLampCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsTurnOffLampCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivingColorsTurnOffLampCmdAdapter() {
		if (livingColorsTurnOffLampCmdItemProvider == null) {
			livingColorsTurnOffLampCmdItemProvider = new LivingColorsTurnOffLampCmdItemProvider(this);
		}

		return livingColorsTurnOffLampCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsSetAddressCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivingColorsSetAddressCmdItemProvider livingColorsSetAddressCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsSetAddressCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivingColorsSetAddressCmdAdapter() {
		if (livingColorsSetAddressCmdItemProvider == null) {
			livingColorsSetAddressCmdItemProvider = new LivingColorsSetAddressCmdItemProvider(this);
		}

		return livingColorsSetAddressCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LiivngColorsSendCommandCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LiivngColorsSendCommandCmdItemProvider liivngColorsSendCommandCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LiivngColorsSendCommandCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLiivngColorsSendCommandCmdAdapter() {
		if (liivngColorsSendCommandCmdItemProvider == null) {
			liivngColorsSendCommandCmdItemProvider = new LiivngColorsSendCommandCmdItemProvider(this);
		}

		return liivngColorsSendCommandCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivingColorsCmdItemProvider livingColorsCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivingColorsCmdAdapter() {
		if (livingColorsCmdItemProvider == null) {
			livingColorsCmdItemProvider = new LivingColorsCmdItemProvider(this);
		}

		return livingColorsCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsCheckAddressCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LivingColorsCheckAddressCmdItemProvider livingColorsCheckAddressCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.cc2250.ezlivingcolors1.LivingColorsCheckAddressCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLivingColorsCheckAddressCmdAdapter() {
		if (livingColorsCheckAddressCmdItemProvider == null) {
			livingColorsCheckAddressCmdItemProvider = new LivingColorsCheckAddressCmdItemProvider(this);
		}

		return livingColorsCheckAddressCmdItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (livingColorsSetRGBCmdItemProvider != null) livingColorsSetRGBCmdItemProvider.dispose();
		if (livingColorsSetHSVCmdItemProvider != null) livingColorsSetHSVCmdItemProvider.dispose();
		if (livingColorsInitCmdItemProvider != null) livingColorsInitCmdItemProvider.dispose();
		if (livingColorsGetMaxNumLampsCmdItemProvider != null) livingColorsGetMaxNumLampsCmdItemProvider.dispose();
		if (livingColorsAddLampCmdItemProvider != null) livingColorsAddLampCmdItemProvider.dispose();
		if (livingColorsLearnLampsCmdItemProvider != null) livingColorsLearnLampsCmdItemProvider.dispose();
		if (livinColorsClearLampsCmdItemProvider != null) livinColorsClearLampsCmdItemProvider.dispose();
		if (livingColorsTurnLampOnRGBCmdItemProvider != null) livingColorsTurnLampOnRGBCmdItemProvider.dispose();
		if (livingColorsTurnLampOnHSVCmdItemProvider != null) livingColorsTurnLampOnHSVCmdItemProvider.dispose();
		if (livingColorsTurnOffLampCmdItemProvider != null) livingColorsTurnOffLampCmdItemProvider.dispose();
		if (livingColorsSetAddressCmdItemProvider != null) livingColorsSetAddressCmdItemProvider.dispose();
		if (liivngColorsSendCommandCmdItemProvider != null) liivngColorsSendCommandCmdItemProvider.dispose();
		if (livingColorsCmdItemProvider != null) livingColorsCmdItemProvider.dispose();
		if (livingColorsCheckAddressCmdItemProvider != null) livingColorsCheckAddressCmdItemProvider.dispose();
		if (livingColorsGetLampCmdItemProvider != null) livingColorsGetLampCmdItemProvider.dispose();
	}

}
