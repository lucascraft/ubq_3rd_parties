/*
* generated by Xtext
*/
package net.sf.fmurf.ui.ui.contentassist.antlr;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import net.sf.fmurf.ui.services.FmurfUiDSLGrammarAccess;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

public class FmurfUiDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private FmurfUiDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected net.sf.fmurf.ui.ui.contentassist.antlr.internal.InternalFmurfUiDSLParser createParser() {
		net.sf.fmurf.ui.ui.contentassist.antlr.internal.InternalFmurfUiDSLParser result = new net.sf.fmurf.ui.ui.contentassist.antlr.internal.InternalFmurfUiDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getFMFProximaVisibleEnumAccess().getAlternatives(), "rule__FMFProximaVisibleEnum__Alternatives");
					put(grammarAccess.getFMFFidStyleEnumAccess().getAlternatives(), "rule__FMFFidStyleEnum__Alternatives");
					put(grammarAccess.getFMFKindAccess().getAlternatives(), "rule__FMFKind__Alternatives");
					put(grammarAccess.getFMFFidFunctionEnumAccess().getAlternatives(), "rule__FMFFidFunctionEnum__Alternatives");
					put(grammarAccess.getFMFFidKindAccess().getAlternatives(), "rule__FMFFidKind__Alternatives");
					put(grammarAccess.getFMFFidColorEnumAccess().getAlternatives(), "rule__FMFFidColorEnum__Alternatives");
					put(grammarAccess.getFMFUIAccess().getGroup(), "rule__FMFUI__Group__0");
					put(grammarAccess.getFiducialAccess().getGroup(), "rule__Fiducial__Group__0");
					put(grammarAccess.getFMFSettingsAccess().getGroup(), "rule__FMFSettings__Group__0");
					put(grammarAccess.getFMFUIAccess().getSettingsAssignment_0(), "rule__FMFUI__SettingsAssignment_0");
					put(grammarAccess.getFMFUIAccess().getFiducialsAssignment_1(), "rule__FMFUI__FiducialsAssignment_1");
					put(grammarAccess.getFiducialAccess().getNameAssignment_1(), "rule__Fiducial__NameAssignment_1");
					put(grammarAccess.getFiducialAccess().getUidAssignment_3(), "rule__Fiducial__UidAssignment_3");
					put(grammarAccess.getFiducialAccess().getStyleAssignment_6(), "rule__Fiducial__StyleAssignment_6");
					put(grammarAccess.getFiducialAccess().getKindAssignment_8(), "rule__Fiducial__KindAssignment_8");
					put(grammarAccess.getFiducialAccess().getFgAssignment_10(), "rule__Fiducial__FgAssignment_10");
					put(grammarAccess.getFiducialAccess().getBgAssignment_12(), "rule__Fiducial__BgAssignment_12");
					put(grammarAccess.getFiducialAccess().getRadiusAssignment_14(), "rule__Fiducial__RadiusAssignment_14");
					put(grammarAccess.getFiducialAccess().getProximaAssignment_16(), "rule__Fiducial__ProximaAssignment_16");
					put(grammarAccess.getFiducialAccess().getProximaVisibleAssignment_18(), "rule__Fiducial__ProximaVisibleAssignment_18");
					put(grammarAccess.getFiducialAccess().getFunctionAssignment_20(), "rule__Fiducial__FunctionAssignment_20");
					put(grammarAccess.getFiducialAccess().getRangeAssignment_22(), "rule__Fiducial__RangeAssignment_22");
					put(grammarAccess.getFMFSettingsAccess().getOscReceivePortAssignment_2(), "rule__FMFSettings__OscReceivePortAssignment_2");
					put(grammarAccess.getFMFSettingsAccess().getOscSendAddressAssignment_4(), "rule__FMFSettings__OscSendAddressAssignment_4");
					put(grammarAccess.getFMFSettingsAccess().getOscSendPortAssignment_6(), "rule__FMFSettings__OscSendPortAssignment_6");
					put(grammarAccess.getFMFSettingsAccess().getTuioPortAssignment_8(), "rule__FMFSettings__TuioPortAssignment_8");
					put(grammarAccess.getFMFSettingsAccess().getLiveRateAssignment_10(), "rule__FMFSettings__LiveRateAssignment_10");
					put(grammarAccess.getFMFSettingsAccess().getProcessingRateAssignment_12(), "rule__FMFSettings__ProcessingRateAssignment_12");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			net.sf.fmurf.ui.ui.contentassist.antlr.internal.InternalFmurfUiDSLParser typedParser = (net.sf.fmurf.ui.ui.contentassist.antlr.internal.InternalFmurfUiDSLParser) parser;
			typedParser.entryRuleFMFUI();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public FmurfUiDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(FmurfUiDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
